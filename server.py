import logging

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import psycopg2
from datetime import datetime, timedelta

from config import host, port, db_name, user, password, api_token
from scrape_movie_link import scrape_movie_link

logging.basicConfig(level=logging.INFO)

bot = Bot(token=api_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

conn = psycopg2.connect(
    host=host,
    port=port,
    dbname=db_name,
    user=user,
    password=password
)
cursor = conn.cursor()

with open('create_users_table.sql', 'r') as sql_config:
    create_table_query = sql_config.read()

cursor.execute(create_table_query)

conn.commit()


# –ú–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
def call_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    search_film = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º üé•", callback_data="search_film")
    subscribe = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="subscribe")
    trial_subscription = types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É üéÅ", callback_data="trial_subscription")
    subscribe_info = types.InlineKeyboardButton("–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚ùì", callback_data="subscribe_info")
    markup.add(search_film, subscribe, trial_subscription, subscribe_info)
    return markup


def check_type_of_video_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    film_button = types.InlineKeyboardButton("–§–∏–ª—å–º üçø", callback_data="film")
    soap_opera_button = types.InlineKeyboardButton("–°–µ—Ä–∏–∞–ª üé¨", callback_data="soap_opera")
    markup.add(film_button, soap_opera_button)
    return markup


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    keyboard = call_menu()
    await message.reply("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üçø –í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ üé• \n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é: ", reply_markup=keyboard)

    user_id = message.chat.id

    # –ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async with state.proxy() as data:
        data['current_step'] = 1

    with open("insert_user_query.sql", "r") as file:
        insert_query = file.read()

    try:
        cursor.execute(insert_query, (user_id,))
        conn.commit()

    except psycopg2.Error:
        conn.rollback()
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@dp.message_handler(commands=['subscribe'])
async def subscribe_command(message: types.Message):
    user_id = message.chat.id
    expiration_date = datetime.now() + timedelta(days=30)

    try:
        cursor.execute('SELECT is_attempt_spent FROM users WHERE user_id = %s;', (user_id,))
        is_attempt_spent = cursor.fetchone()[0]

        if not is_attempt_spent:
            await message.answer(f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiration_date}")

            with open("update_subscribe_query.sql", "r") as file:
                update_query = file.read()

            try:
                cursor.execute(update_query, (user_id,))
                conn.commit()

            except psycopg2.Error:
                conn.rollback()
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        else:
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")

    except psycopg2.Error:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.callback_query_handler(lambda callback_query: True)
async def callback(call, state: FSMContext):
    user_id = call.message.chat.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –µ—ë —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    if call.data == "search_film":
        cursor.execute('SELECT subscribe FROM users WHERE user_id = %s;', (user_id,))
        subscribe_date = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        if subscribe_date:
            current_date = datetime.now()
            difference = current_date - subscribe_date

            if difference.days > 30:
                await bot.send_message(call.message.chat.id, "–°—Ä–æ–∫ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é: /subscribe")
            else:
                await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞: ")

                # –ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                async with state.proxy() as data:
                    data['current_step'] = 2
        else:
            await bot.send_message(call.message.chat.id, "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π: /subscribe")

    elif call.data == "film":
        await bot.send_message(call.message.chat.id, "–ë–æ—Ç –∏—â–µ—Ç —Ñ–∏–ª—å–º...ü§ñ")

        async with state.proxy() as data:
            data['current_step'] = 1
            film_name = str(data["film_name"])
            movie_link = scrape_movie_link(f"https://vk.com/video?q={film_name}&ysclid=lt39nq9jf8631020539")

            await bot.send_message(call.message.chat.id, movie_link)

    elif call.data == "soap_opera":
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞:")

        async with state.proxy() as data:
            data['current_step'] = 3

    elif call.data == "subscribe":
        await bot.send_message(call.message.chat.id, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    elif call.data == "trial_subscription":
        user_id = call.message.chat.id

        try:
            cursor.execute('SELECT is_attempt_spent FROM users WHERE user_id = %s;', (user_id,))
            is_attempt_spent = cursor.fetchone()[0]

            if not is_attempt_spent:
                expiration_date = datetime.now() + timedelta(days=30)

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã expiration_date –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
                formatted_date = expiration_date.strftime('%d.%m.%Y')

                await call.message.answer(f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {formatted_date}")

                with open("update_subscribe_query.sql", "r") as file:
                    update_query = file.read()

                try:
                    cursor.execute(update_query, (user_id,))
                    conn.commit()

                except psycopg2.Error:
                    conn.rollback()
                    await call.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            else:
                await call.message.answer(f"–í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")

        except psycopg2.Error:
            await call.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    elif call.data == "subscribe_info":
        cursor.execute('SELECT subscribe FROM users WHERE user_id = %s;', (user_id,))
        subscribe_date = cursor.fetchone()[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        if subscribe_date:
            current_date = datetime.now()
            difference = current_date - subscribe_date

            if difference.days > 30:
                await bot.send_message(call.message.chat.id, "–°—Ä–æ–∫ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é: /subscribe")
            else:
                expiration_date = subscribe_date + timedelta(days=30)

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã expiration_date –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
                formatted_date = expiration_date.strftime('%d.%m.%Y')

                await bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {formatted_date}")

        else:
            await bot.send_message(call.message.chat.id, "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π: /subscribe")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(lambda message: message.text)
async def handle_text(message: types.Message, state: FSMContext):
    user_id = message.chat.id

    input_data = message.text

    # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    async with state.proxy() as data:
        if data['current_step'] == 2:
            data['film_name'] = input_data

            keyboard = check_type_of_video_menu()
            await message.reply("–≠—Ç–æ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª?", reply_markup=keyboard)

        elif data['current_step'] == 3:
            try:
                float(input_data)

                data['season'] = input_data
                data['current_step'] = 4

                await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏: ")

            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

        elif data['current_step'] == 4:
            try:
                float(input_data)

                data['series'] = input_data
                data['current_step'] = 1

                await message.reply("–ë–æ—Ç –∏—â–µ—Ç —Å–µ—Ä–∏—é... ü§ñ")

                film_name = str(data["film_name"])
                season = str(data["season"])
                series = str(data["series"])
                movie_link = scrape_movie_link(f"https://vk.com/video?q={film_name}%20{season}%20—Å–µ–∑–æ–Ω%20{series}%20—Å–µ—Ä–∏—è&ysclid=lt39nq9jf8631020539")

                await bot.send_message(message.chat.id, movie_link)

            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –±–æ—Ç–∞")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)